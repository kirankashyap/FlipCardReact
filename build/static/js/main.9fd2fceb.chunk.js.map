{"version":3,"sources":["logo.svg","Card.js","HomePageComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","this","props","title","React","Component","HomePageComponent","state","cards","elements","items","entries","value","push","border","type","id","onClick","setState","concat","$","val","renderCards","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wJAAAA,EAAOC,QAAU,IAA0B,kC,wKCY5BC,E,iLAPX,OAAO,6BAAMC,KAAKC,MAAMC,W,GAHTC,IAAMC,WCuDVC,E,YAjDf,aAAc,IAAD,8BACX,+CACKC,MAAQ,CACXC,MAAO,IAHE,E,2EAQX,IAAMC,EAAWR,KAAKM,MAAMC,MAEtBE,EAAQ,GAHH,uBAKX,YAA6BD,EAASE,UAAtC,+CAAiD,CAAC,IAAD,6BAA9BC,GAA8B,WAC/CF,EAAMG,KAAK,6BAAK,2BAAOC,OAAO,KAC9B,4BACE,4BAAI,gCAAQ,kBAAC,EAAD,CAAMX,MAAOS,MACzB,4BAAI,gDATG,kFAcX,OAAOF,I,sEASA,IAAD,OACN,OAAQ,6BACR,0CADQ,aAEE,2BAAOK,KAAK,OAAOC,GAAG,iBAClC,4BAAQA,GAAG,YAAYC,QAAS,WAC5B,EAAKC,SAAS,CAACV,MAAM,EAAKD,MAAMC,MAAMW,OAAOC,IAAE,iBAAiBC,WADpE,OAKOpB,KAAKqB,mB,GAzCoBlB,IAAMC,WCOvBkB,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9fd2fceb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\r\n\r\nclass Card extends React.Component{\r\n\r\n  render(){\r\n    return <div>{this.props.title}</div>\r\n    ;\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default Card;\r\n","\r\nimport React from 'react';\r\nimport $ from 'jquery';\r\nimport Card from './Card';\r\nimport ReactDOM from 'react-dom';\r\nvar questionsList = [\"ab\"];\r\nclass HomePageComponent extends React.Component{\r\n\r\nconstructor(){\r\n  super();\r\n  this.state = {\r\n    cards: []\r\n  }\r\n}\r\n\r\nrenderCards(){\r\n  const elements = this.state.cards;\r\n\r\n  const items = []\r\n\r\n  for (const [index, value] of elements.entries()) {\r\n    items.push(<div><table border=\"1\">\r\n    <tr>\r\n      <td><button><Card title={value} /></button></td>\r\n      <td><button>delete</button></td>\r\n    </tr>\r\n  </table></div>)\r\n  }\r\n\r\n  return items;\r\n}\r\n\r\n\r\naddQuestion(){\r\n\r\n\r\n}\r\n\r\nrender(){\r\n  return (<div>\r\n  <h1> Flipcard </h1>\r\n  Question: <input type=\"text\" id=\"questionText\"/>\r\n<button id=\"addButton\" onClick={()=>{\r\n    this.setState({cards:this.state.cards.concat($(\"#questionText\").val ())})\r\n  }}>Add</button>\r\n\r\n\r\n      {this.renderCards()}\r\n\r\n\r\n</div>);\r\n}\r\n\r\n\r\n}\r\n\r\n\r\nexport default HomePageComponent;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport HomePageComponent from './HomePageComponent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HomePageComponent/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}