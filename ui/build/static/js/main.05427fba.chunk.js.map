{"version":3,"sources":["logo.svg","Card.js","HomePageComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","this","props","title","React","Component","HomePageComponent","state","cards","elements","items","entries","value","push","border","fetch","then","res","json","data","console","log","setState","type","id","onClick","textValue","$","val","concat","method","headers","body","JSON","stringify","renderCards","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wJAAAA,EAAOC,QAAU,IAA0B,kC,wKCY5BC,E,iLAPX,OAAO,6BAAMC,KAAKC,MAAMC,W,GAHTC,IAAMC,WCuEVC,E,YAnEf,aAAc,IAAD,8BACX,+CACKC,MAAQ,CACXC,MAAO,IAHE,E,2EAQX,IAAMC,EAAWR,KAAKM,MAAMC,MAEtBE,EAAQ,GAHH,uBAKX,YAA6BD,EAASE,UAAtC,+CAAiD,CAAC,IAAD,6BAA9BC,GAA8B,WAC/CF,EAAMG,KAAK,6BAAK,2BAAOC,OAAO,KAC9B,4BACE,4BAAI,gCAAQ,kBAAC,EAAD,CAAMX,MAAOS,EAAMT,UAC/B,4BAAI,gDATG,kFAcX,OAAOO,I,0CAIY,IAAD,OACbK,MAAM,uCACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACLC,QAAQC,IAAIF,GACX,EAAKG,SAAS,CAAEd,MAAOW,S,+BAKxB,IAAD,OACN,OAAQ,6BACR,0CADQ,aAGE,2BAAOI,KAAK,OAAOC,GAAG,iBAClC,4BAAQA,GAAG,YAAYC,QAAS,WAC5B,IAAIC,EAAYC,IAAE,iBAAiBC,MACnC,EAAKN,SAAS,CAACd,MAAM,EAAKD,MAAMC,MAAMqB,OAAO,CAC3C,MAASH,MAEXX,MAAM,sCACA,CACAe,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAKC,KAAKC,UAAU,CAAC,MAASR,QAXxC,OAiBOzB,KAAKkC,mB,GA3DoB/B,IAAMC,WCSvB+B,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,MAAK,SAAAkC,GACjCA,EAAaC,kB","file":"static/js/main.05427fba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\r\n\r\nclass Card extends React.Component{\r\n\r\n  render(){\r\n    return <div>{this.props.title}</div>\r\n    ;\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default Card;\r\n","\r\nimport React from 'react';\r\nimport $ from 'jquery';\r\nimport Card from './Card';\r\nclass HomePageComponent extends React.Component{\r\n\r\nconstructor(){\r\n  super();\r\n  this.state = {\r\n    cards: []\r\n  }\r\n}\r\n\r\nrenderCards(){\r\n  const elements = this.state.cards;\r\n\r\n  const items = []\r\n\r\n  for (const [index, value] of elements.entries()) {\r\n    items.push(<div><table border=\"1\">\r\n    <tr>\r\n      <td><button><Card title={value.title} /></button></td>\r\n      <td><button>delete</button></td>\r\n    </tr>\r\n  </table></div>)\r\n  }\r\n\r\n  return items;\r\n}\r\n\r\n\r\ncomponentDidMount() {\r\n       fetch('http://localhost:5000/api/questions')\r\n       .then(res => res.json())\r\n       .then((data) => {\r\n         console.log(data);\r\n          this.setState({ cards: data })\r\n        })\r\n}\r\n\r\n\r\nrender(){\r\n  return (<div>\r\n  <h1> Flipcard </h1>\r\n\r\n  Question: <input type=\"text\" id=\"questionText\"/>\r\n<button id=\"addButton\" onClick={()=>{\r\n    var textValue = $(\"#questionText\").val();\r\n    this.setState({cards:this.state.cards.concat({\r\n      \"title\": textValue\r\n    })})\r\n    fetch('http://localhost:5000/api/questions',\r\n          {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body:JSON.stringify({\"title\": textValue})\r\n\r\n          })\r\n  }}>Add</button>\r\n\r\n\r\n      {this.renderCards()}\r\n\r\n\r\n</div>);\r\n}\r\n\r\n\r\n}\r\n\r\n\r\nexport default HomePageComponent;\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport HomePageComponent from './HomePageComponent';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <HomePageComponent/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}